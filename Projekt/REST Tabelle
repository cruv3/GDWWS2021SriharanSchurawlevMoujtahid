##REST Tabelle

#User
| Ressource  | Methode | Semantik                               | Conten-type(req) | Content-type(res) | HTTP StatuscoQdes |
| ---------- | ------- | -------------------------------------- | ---------------- | ----------------- | ----------------- |
| /User      | GET     | Gibt alle Nutzer aus                   |                  | Applikation/Json  | 200,500           |
| /User/{id} | GET     | Informationen eines bestimmten Nutzers |                  | Applikation/Json  | 200,404,500       |
| /User      | Post    | Fügt einen Nutzer hinzu                | Applikation/Json | Applikation/Json  | 200,201,500       |
| /User/{id} | PUT     | Aktualisiert Nutzer Daten              | Applikation/Json | Applikation/Json  | 200,201,204,500   |
| /User/{id} | DELETE  | Löscht Nutzer                          | Applikation/Json |                   | 200,500           |

	
#Historie
| Ressource      | Methode | Semantik                                | Conten-type(req) | Content-type(res) | HTTP StatuscoQdes |
| -------------- | ------- | --------------------------------------- | ---------------- | ----------------- | ----------------- |
| /Historie      | GET     | Gibt alle Rechnungen aus                |                  | Applikation/Json  | 200,500           |
| /Historie/{id} | GET     | Informationen einer bestimmten Rechnung |                  | Applikation/Json  | 200,404,500       |
| /Historie      | Post    | Fügt eine Rechnung hinzu                | Applikation/Json | Applikation/Json  | 200,201,500       |
| /Historie/{id} | PUT     | Aktualisiert die Historie               | Applikation/Json | Applikation/Json  | 200,201,204,500   |
| /Historie/{id} | DELETE  | Löscht Rechnung                         | Applikation/Json |                   | 200,500           |

#Produkt
| Ressource      | Methode | Semantik                                | Conten-type(req) | Content-type(res) | HTTP StatuscoQdes |
| -------------- | ------- | --------------------------------------- | ---------------- | ----------------- | ----------------- |
| /Produkt       | GET     | Gibt alle Produkte aus                  |                  | Applikation/Json  | 200,500           |
| /Produkt/{id}  | GET     | Informationen eines bestimmten Produktes|                  | Applikation/Json  | 200,404,500       |
| /Produkt       | Post    | Fügt einen Produkt hinzu                | Applikation/Json | Applikation/Json  | 200,201,500       |
| /Produkt/{id}  | PUT     | Aktualisiert die Produktliste           | Applikation/Json | Applikation/Json  | 200,201,204,500   |
| /Produkt/{id}  | DELETE  | Löscht Produkt                          | Applikation/Json |                   | 200,500           |

#Ressourcen
Die Ressourcendefinition wurde von unserem überarbeitetem Domainmodell sowie unserer Projektbeschreibung abgeleitet.

Ein Kunde loggt sich ein, sucht oder filtert ein bestimmtes Produkt, wählt das gewünschte Produkt von einen bestimmten Anbieter aus, bestellt das Produkt, 
Kunde wird zum Onlineshop vom Anbieter weitergeleitet, führt die Zahlungsabwicklung durch und erhält eine Rechnung die in der Historie gespecihert wird - und immer wieder
aufrufbar ist.

•	User
    o	Vor/Nachname
    o	ID
    o	Alter
    o	Username
    o	Adresse
    o 	Payment method

•	Produkt
    o	ID
    o	Kategorie
    o	Preis
    o	Herstellergarantie
    
•	Online-Shop
    o	ID
    o	Produkt
    o	Zusatzgarantie


•	Rechnung
    o	ID
    o	Produkt
    o	Einkaufsdatum
    o	Gesamtgarantiedauer


•	Historie
    o	ID
    o	Rechnung
    

#Path / Quarry parameter und Primär-/Subressourcen sowie Listenressourcen.
Wir Benutzen Quarry-parameter, um z.b im Interface nach Produkten einer Bestimmten Produkt-Kategorie zu suchen.
Der Server liefert dann eine Liste aller Produkten, die mit der Art übereinstimmen.
In unserem System gehen wir davon aus , dass sich der User registriert um auf seine Historie zuzugreifen, doch er kann auch als Gast die Produkte bei uns kaufen.
Primärressource wäre ein registrierter User und Subressource ein Gast, doch ein Gast hat nicht Zugriff auf alle Funktionen (weniger sinnvoll).




#REST-Prinzipien
„REST APIs must be hypertext-driven“ betont Roy Fielding in einem Blog-Beitragx1 und um das zu schaffen orientierten wir uns am Richardson Maturity Modelx2, Dabei haben wir folgende Punkte umgesetzt:
1.	Jede Ressource hat seine eigene URL
2.	Jede Ressource hat eine oder mehrere Repräsentationen vorgesehen, die über das Internet übertragen werden können
3.	In jeder REST- Nachricht sind alle Informationen enthalten, die der Server/Client benötigt, um die Nachricht richtig interpretieren zu können.
	beim Austausch von Nachricht werden keine Informationen über den Zustand gespeichert
4.	Alle Ressourcen haben ein gleichmäßigen Satz von CRUD-Operationen (Create, Read, Update, Delete)
5.	Hypermedia Mit der Repräsentation einer Ressource wird auch auf Links anderer Ressourcen-Entitäten referenziert, die für den Ablauf des weiteren Dialoges wichtig sind


#Benutzte HTTP Statuscodes
| Code | Bedeutung             | Erläuterung                                                                                                                                                                                                            |
| 200  | Ok                    | Die Anfrage wurde erfolgreich verarbeitet, die Antowrt enthält weiter Informationen                                                                                                                                    |
| 201  | Created               | ie Anfrage wurde erfolgreiche verarbeitet und als Ergebnis wurde eine neue Ressource angelegt, deren URI sich in einem Location-Header befindet                                                                        |
| 204  | No content            | Der Server liefert nur Metadaten, Keine Dateien                                                                                                                                                                        |
| 404  | Not Found             | Der Server kennt keine Ressource mit dieser URI                                                                                                                                                                        |
| 500  | Internal Server Error | Ein nicht näher spezifischer interner Fehler ist bei der Verarbeitung im Server aufgetreten. Dies ist der „harmloseste“ aller Fehlermeldungen – sie erlaubt dem Clienten keinerlei Rückschluss auf die Art des Fehlers |





https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven
https://blog.restcase.com/4-maturity-levels-of-rest-api-design/


